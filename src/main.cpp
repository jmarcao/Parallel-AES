/**
 * Parallel AES for CIS565 Project 4
 * John Marcao
 */

#include <cstdio>
#include <parallel_aes/cpu.h>
#include <parallel_aes/gpu.h>
#include "testing_helpers.hpp"

const int SIZE = 1 << 10; // feel free to change the size of array
const int NPOT = SIZE - 3; // Non-Power-Of-Two
int *a = new int[SIZE];
int *b = new int[SIZE];
int *c = new int[SIZE];

int main(int argc, char* argv[]) {

	// TODO: Parse opts. For now, use variables
	// AES256 Test Vector
	uint8_t key256[] = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
					  0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
	uint8_t out256[] = { 0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8 };

	// AES192 Test Vector
	uint8_t key192[] = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
					  0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
	uint8_t out192[] = { 0xbd, 0x33, 0x4f, 0x1d, 0x6e, 0x45, 0xf2, 0x5f, 0xf7, 0x12, 0xa2, 0x14, 0x57, 0x1f, 0xa5, 0xcc };


	// AES128 Test Vector
	uint8_t key128[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
	uint8_t out128[] = { 0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97 };

	uint8_t in[] = { (uint8_t)0x6b, (uint8_t)0xc1, (uint8_t)0xbe, (uint8_t)0xe2, (uint8_t)0x2e, (uint8_t)0x40, (uint8_t)0x9f, (uint8_t)0x96, (uint8_t)0xe9, (uint8_t)0x3d, (uint8_t)0x7e, (uint8_t)0x11, (uint8_t)0x73, (uint8_t)0x93, (uint8_t)0x17, (uint8_t)0x2a,
							   (uint8_t)0xae, (uint8_t)0x2d, (uint8_t)0x8a, (uint8_t)0x57, (uint8_t)0x1e, (uint8_t)0x03, (uint8_t)0xac, (uint8_t)0x9c, (uint8_t)0x9e, (uint8_t)0xb7, (uint8_t)0x6f, (uint8_t)0xac, (uint8_t)0x45, (uint8_t)0xaf, (uint8_t)0x8e, (uint8_t)0x51,
							   (uint8_t)0x30, (uint8_t)0xc8, (uint8_t)0x1c, (uint8_t)0x46, (uint8_t)0xa3, (uint8_t)0x5c, (uint8_t)0xe4, (uint8_t)0x11, (uint8_t)0xe5, (uint8_t)0xfb, (uint8_t)0xc1, (uint8_t)0x19, (uint8_t)0x1a, (uint8_t)0x0a, (uint8_t)0x52, (uint8_t)0xef,
							   (uint8_t)0xf6, (uint8_t)0x9f, (uint8_t)0x24, (uint8_t)0x45, (uint8_t)0xdf, (uint8_t)0x4f, (uint8_t)0x9b, (uint8_t)0x17, (uint8_t)0xad, (uint8_t)0x2b, (uint8_t)0x41, (uint8_t)0x7b, (uint8_t)0xe6, (uint8_t)0x6c, (uint8_t)0x37, (uint8_t)0x10 };

	PAES::GPU::encrypt_ecb(PAES::GPU::AESType::AES128, key128, in, 64);

	if (0 == memcmp((char*)out128, (char*)in, 16)) {
		printf("SUCCESS!\n");
		return(0);
	}
	else {
		printf("FAILURE!\n");
		return(1);
	}


	// ECB Mode
	// CPU Test
	// CPU_AES_ECB_128
	// CPU_AES_ECB_192
	// CPU_AES_ECB_256

	// GPU-Naive
	// GPU_N_AES_ECB_128
	// GPU_N_AES_ECB_192
	// GPU_N_AES_ECB_256

	// GPU-Optimized
	// GPU_O_AES_ECB_128
	// GPU_O_AES_ECB_192
	// GPU_O_AES_ECB_256

	// CTR Mode
	// CPU Test
	// CPU_AES_CTR_128
	// CPU_AES_CTR_192
	// CPU_AES_CTR_256

	// GPU-Naive
	// GPU_N_AES_CTR_128
	// GPU_N_AES_CTR_192
	// GPU_N_AES_CTR_256

	// GPU-Optimized
	// GPU_O_AES_CTR_128
	// GPU_O_AES_CTR_192
	// GPU_O_AES_CTR_256


    system("pause"); // stop Win32 console from closing on exit
}
